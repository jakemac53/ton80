// Generated by dart2js, the Dart to JavaScript compiler version: 1.24.2.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
//
// defaultPackagesBase:
//    Override the location where `package:` uris are resolved from. By default
//    they are resolved under "packages/" from the current window location.
(function() {
  // /* ::norenaming:: */
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function map(x) {
    x = Object.create(null);
    x.x = 0;
    delete x.x;
    return x;
  }
  // The global objects start as so-called "slow objects". For V8, this
  // means that it won't try to make map transitions as we add properties
  // to these objects. Later on, we attempt to turn these objects into
  // fast objects by calling "convertToFastObject" (see
  // [emitConvertToFastObjectFunction]).
  var A = map();
  var B = map();
  var C = map();
  var D = map();
  var E = map();
  var F = map();
  var G = map();
  var H = map();
  var J = map();
  var K = map();
  var L = map();
  var M = map();
  var N = map();
  var O = map();
  var P = map();
  var Q = map();
  var R = map();
  var S = map();
  var T = map();
  var U = map();
  var V = map();
  var W = map();
  var X = map();
  var Y = map();
  var Z = map();
  function Isolate() {
  }
  init();
  // Constructors are generated at runtime.
  function setupProgram(programData, typesOffset) {
    "use strict";
    function generateAccessor(fieldDescriptor, accessors, cls) {
      var fieldInformation = fieldDescriptor.split("-");
      var field = fieldInformation[0];
      var len = field.length;
      var code = field.charCodeAt(len - 1);
      var reflectable;
      if (fieldInformation.length > 1)
        reflectable = true;
      else
        reflectable = false;
      code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
      if (code) {
        var getterCode = code & 3;
        var setterCode = code >> 2;
        var accessorName = field = field.substring(0, len - 1);
        var divider = field.indexOf(":");
        if (divider > 0) {
          accessorName = field.substring(0, divider);
          field = field.substring(divider + 1);
        }
        if (getterCode) {
          var args = getterCode & 2 ? "receiver" : "";
          var receiver = getterCode & 1 ? "this" : "receiver";
          var body = "return " + receiver + "." + field;
          var property = cls + ".prototype.get$" + accessorName + "=";
          var fn = "function(" + args + "){" + body + "}";
          if (reflectable)
            accessors.push(property + "$reflectable(" + fn + ");\n");
          else
            accessors.push(property + fn + ";\n");
        }
        if (setterCode) {
          var args = setterCode & 2 ? "receiver, value" : "value";
          var receiver = setterCode & 1 ? "this" : "receiver";
          var body = receiver + "." + field + " = value";
          var property = cls + ".prototype.set$" + accessorName + "=";
          var fn = "function(" + args + "){" + body + "}";
          if (reflectable)
            accessors.push(property + "$reflectable(" + fn + ");\n");
          else
            accessors.push(property + fn + ";\n");
        }
      }
      return field;
    }
    function defineClass(name, fields) {
      var accessors = [];
      var str = "function " + name + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = generateAccessor(fields[i], accessors, name);
        var parameter = "p_" + field;
        str += parameter;
        body += "this." + field + " = " + parameter + ";\n";
      }
      if (supportsDirectProtoAccess)
        body += "this." + "$deferredAction" + "();";
      str += ") {\n" + body + "}\n";
      str += name + ".builtin$cls=\"" + name + "\";\n";
      str += "$desc=$collectedClasses." + name + "[1];\n";
      str += name + ".prototype = $desc;\n";
      if (typeof defineClass.name != "string")
        str += name + ".name=\"" + name + "\";\n";
      str += accessors.join("");
      return str;
    }
    var inheritFrom = supportsDirectProtoAccess ? function(constructor, superConstructor) {
      var prototype = constructor.prototype;
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
      prototype["$is" + constructor.name] = constructor;
      return convertToFastObject(prototype);
    } : function() {
      function tmp() {
      }
      return function(constructor, superConstructor) {
        tmp.prototype = superConstructor.prototype;
        var object = new tmp();
        convertToSlowObject(object);
        var properties = constructor.prototype;
        var members = Object.keys(properties);
        for (var i = 0; i < members.length; i++) {
          var member = members[i];
          object[member] = properties[member];
        }
        object["$is" + constructor.name] = constructor;
        object.constructor = constructor;
        constructor.prototype = object;
        return object;
      };
    }();
    function finishClasses(processedClasses) {
      var allClasses = init.allClasses;
      processedClasses.combinedConstructorFunction += "return [\n" + processedClasses.constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", processedClasses.combinedConstructorFunction)(processedClasses.collected);
      processedClasses.combinedConstructorFunction = null;
      for (var i = 0; i < constructors.length; i++) {
        var constructor = constructors[i];
        var cls = constructor.name;
        var desc = processedClasses.collected[cls];
        var globalObject = desc[0];
        desc = desc[1];
        allClasses[cls] = constructor;
        globalObject[cls] = constructor;
      }
      constructors = null;
      var finishedClasses = init.finishedClasses;
      function finishClass(cls) {
        if (finishedClasses[cls])
          return;
        finishedClasses[cls] = true;
        var superclass = processedClasses.pending[cls];
        if (superclass && superclass.indexOf("+") > 0) {
          var s = superclass.split("+");
          superclass = s[0];
          var mixinClass = s[1];
          finishClass(mixinClass);
          var mixin = allClasses[mixinClass];
          var mixinPrototype = mixin.prototype;
          var clsPrototype = allClasses[cls].prototype;
          var properties = Object.keys(mixinPrototype);
          for (var i = 0; i < properties.length; i++) {
            var d = properties[i];
            if (!hasOwnProperty.call(clsPrototype, d))
              clsPrototype[d] = mixinPrototype[d];
          }
        }
        if (!superclass || typeof superclass != "string") {
          var constructor = allClasses[cls];
          var prototype = constructor.prototype;
          prototype.constructor = constructor;
          prototype.$isObject = constructor;
          prototype.$deferredAction = function() {
          };
          return;
        }
        finishClass(superclass);
        var superConstructor = allClasses[superclass];
        if (!superConstructor)
          superConstructor = existingIsolateProperties[superclass];
        var constructor = allClasses[cls];
        var prototype = inheritFrom(constructor, superConstructor);
        if (mixinPrototype)
          prototype.$deferredAction = mixinDeferredActionHelper(mixinPrototype, prototype);
        if (Object.prototype.hasOwnProperty.call(prototype, "%")) {
          var nativeSpec = prototype["%"].split(";");
          if (nativeSpec[0]) {
            var tags = nativeSpec[0].split("|");
            for (var i = 0; i < tags.length; i++) {
              init.interceptorsByTag[tags[i]] = constructor;
              init.leafTags[tags[i]] = true;
            }
          }
          if (nativeSpec[1]) {
            tags = nativeSpec[1].split("|");
            if (nativeSpec[2]) {
              var subclasses = nativeSpec[2].split("|");
              for (var i = 0; i < subclasses.length; i++) {
                var subclass = allClasses[subclasses[i]];
                subclass.$nativeSuperclassTag = tags[0];
              }
            }
            for (i = 0; i < tags.length; i++) {
              init.interceptorsByTag[tags[i]] = constructor;
              init.leafTags[tags[i]] = false;
            }
          }
          prototype.$deferredAction();
        }
        if (prototype.$isInterceptor)
          prototype.$deferredAction();
      }
      var properties = Object.keys(processedClasses.pending);
      for (var i = 0; i < properties.length; i++)
        finishClass(properties[i]);
    }
    function finishAddStubsHelper() {
      var prototype = this;
      while (!prototype.hasOwnProperty("$deferredAction"))
        prototype = prototype.__proto__;
      delete prototype.$deferredAction;
      var properties = Object.keys(prototype);
      for (var index = 0; index < properties.length; index++) {
        var property = properties[index];
        var firstChar = property.charCodeAt(0);
        var elem;
        if (property !== "^" && property !== "$reflectable" && firstChar !== 43 && firstChar !== 42 && (elem = prototype[property]) != null && elem.constructor === Array && property !== "<>")
          addStubs(prototype, elem, property, false, []);
      }
      convertToFastObject(prototype);
      prototype = prototype.__proto__;
      prototype.$deferredAction();
    }
    function mixinDeferredActionHelper(mixinPrototype, targetPrototype) {
      var chain;
      if (targetPrototype.hasOwnProperty("$deferredAction"))
        chain = targetPrototype.$deferredAction;
      return function foo() {
        if (!supportsDirectProtoAccess)
          return;
        var prototype = this;
        while (!prototype.hasOwnProperty("$deferredAction"))
          prototype = prototype.__proto__;
        if (chain)
          prototype.$deferredAction = chain;
        else {
          delete prototype.$deferredAction;
          convertToFastObject(prototype);
        }
        mixinPrototype.$deferredAction();
        prototype.$deferredAction();
      };
    }
    function processClassData(cls, descriptor, processedClasses) {
      descriptor = convertToSlowObject(descriptor);
      var previousProperty;
      var properties = Object.keys(descriptor);
      var hasDeferredWork = false;
      var shouldDeferWork = supportsDirectProtoAccess && cls != "Object";
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        var firstChar = property.charCodeAt(0);
        if (property === "static") {
          processStatics(init.statics[cls] = descriptor.static, processedClasses);
          delete descriptor.static;
        } else if (firstChar === 43) {
          mangledNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0)
            descriptor[previousProperty].$reflectable = flag;
        } else if (firstChar === 42) {
          descriptor[previousProperty].$defaultValues = descriptor[property];
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods)
            descriptor.$methodsWithOptionalArguments = optionalMethods = {};
          optionalMethods[property] = previousProperty;
        } else {
          var elem = descriptor[property];
          if (property !== "^" && elem != null && elem.constructor === Array && property !== "<>")
            if (shouldDeferWork)
              hasDeferredWork = true;
            else
              addStubs(descriptor, elem, property, false, []);
          else
            previousProperty = property;
        }
      }
      if (hasDeferredWork)
        descriptor.$deferredAction = finishAddStubsHelper;
      var classData = descriptor["^"], split, supr, fields = classData;
      var s = fields.split(";");
      fields = s[1] ? s[1].split(",") : [];
      supr = s[0];
      split = supr.split(":");
      if (split.length == 2) {
        supr = split[0];
        var functionSignature = split[1];
        if (functionSignature)
          descriptor.$signature = function(s) {
            return function() {
              return init.types[s];
            };
          }(functionSignature);
      }
      if (supr)
        processedClasses.pending[cls] = supr;
      processedClasses.combinedConstructorFunction += defineClass(cls, fields);
      processedClasses.constructorsList.push(cls);
      processedClasses.collected[cls] = [globalObject, descriptor];
      classes.push(cls);
    }
    function processStatics(descriptor, processedClasses) {
      var properties = Object.keys(descriptor);
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        if (property === "^")
          continue;
        var element = descriptor[property];
        var firstChar = property.charCodeAt(0);
        var previousProperty;
        if (firstChar === 43) {
          mangledGlobalNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0)
            descriptor[previousProperty].$reflectable = flag;
          if (element && element.length)
            init.typeInformation[previousProperty] = element;
        } else if (firstChar === 42) {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods)
            descriptor.$methodsWithOptionalArguments = optionalMethods = {};
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else if (element.constructor === Array)
          addStubs(globalObject, element, property, true, functions);
        else {
          previousProperty = property;
          processClassData(property, element, processedClasses);
        }
      }
    }
    function addStubs(prototype, array, name, isStatic, functions) {
      var index = 0, alias = array[index], f;
      if (typeof alias == "string")
        f = array[++index];
      else {
        f = alias;
        alias = name;
      }
      var funcs = [prototype[name] = prototype[alias] = f];
      f.$stubName = name;
      functions.push(name);
      for (index++; index < array.length; index++) {
        f = array[index];
        if (typeof f != "function")
          break;
        if (!isStatic)
          f.$stubName = array[++index];
        funcs.push(f);
        if (f.$stubName) {
          prototype[f.$stubName] = f;
          functions.push(f.$stubName);
        }
      }
      for (var i = 0; i < funcs.length; index++, i++)
        funcs[i].$callName = array[index];
      var getterStubName = array[index];
      array = array.slice(++index);
      var requiredParameterInfo = array[0];
      var requiredParameterCount = requiredParameterInfo >> 1;
      var isAccessor = (requiredParameterInfo & 1) === 1;
      var isSetter = requiredParameterInfo === 3;
      var isGetter = requiredParameterInfo === 1;
      var optionalParameterInfo = array[1];
      var optionalParameterCount = optionalParameterInfo >> 1;
      var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
      var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
      var functionTypeIndex = array[2];
      if (typeof functionTypeIndex == "number")
        array[2] = functionTypeIndex + typesOffset;
      var unmangledNameIndex = 2 * optionalParameterCount + requiredParameterCount + 3;
      if (getterStubName) {
        f = tearOff(funcs, array, isStatic, name, isIntercepted);
        prototype[name].$getter = f;
        f.$getterStub = true;
        if (isStatic) {
          init.globalFunctions[name] = f;
          functions.push(getterStubName);
        }
        prototype[getterStubName] = f;
        funcs.push(f);
        f.$stubName = getterStubName;
        f.$callName = null;
      }
    }
    function tearOffGetter(funcs, reflectionInfo, name, isIntercepted) {
      return isIntercepted ? new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(x) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, reflectionInfo, false, [x], name);" + "return new c(this, funcs[0], x, name);" + "}")(funcs, reflectionInfo, name, H, null) : new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, reflectionInfo, false, [], name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, reflectionInfo, name, H, null);
    }
    function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
      var cache;
      return isStatic ? function() {
        if (cache === void 0)
          cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
        return cache;
      } : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
    }
    var functionCounter = 0;
    if (!init.libraries)
      init.libraries = [];
    if (!init.mangledNames)
      init.mangledNames = map();
    if (!init.mangledGlobalNames)
      init.mangledGlobalNames = map();
    if (!init.statics)
      init.statics = map();
    if (!init.typeInformation)
      init.typeInformation = map();
    if (!init.globalFunctions)
      init.globalFunctions = map();
    var libraries = init.libraries;
    var mangledNames = init.mangledNames;
    var mangledGlobalNames = init.mangledGlobalNames;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var length = programData.length;
    var processedClasses = map();
    processedClasses.collected = map();
    processedClasses.pending = map();
    processedClasses.constructorsList = [];
    processedClasses.combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
    for (var i = 0; i < length; i++) {
      var data = programData[i];
      var name = data[0];
      var uri = data[1];
      var metadata = data[2];
      var globalObject = data[3];
      var descriptor = data[4];
      var isRoot = !!data[5];
      var fields = descriptor && descriptor["^"];
      if (fields instanceof Array)
        fields = fields[0];
      var classes = [];
      var functions = [];
      processStatics(descriptor, processedClasses);
      libraries.push([name, uri, classes, functions, metadata, fields, isRoot, globalObject]);
    }
    finishClasses(processedClasses);
  }
  Isolate.functionThatReturnsNull = function() {
  };
  var dart = [["_foreign_helper", "dart:_foreign_helper",, H, {
    "^": "",
    JS_CONST: {
      "^": "Object;code"
    }
  }], ["_interceptors", "dart:_interceptors",, J, {
    "^": "",
    getInterceptor: function(object) {
      return void 0;
    },
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor: function(object) {
      var record, proto, objectProto, $constructor, interceptor;
      record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(new P.UnimplementedError("Return interceptor for " + H.S(proto(object, record))));
      }
      $constructor = object.constructor;
      interceptor = $constructor == null ? null : $constructor[$.$get$JS_INTEROP_INTERCEPTOR_TAG()];
      if (interceptor != null)
        return interceptor;
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return C.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return C.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        Object.defineProperty($constructor, $.$get$JS_INTEROP_INTERCEPTOR_TAG(), {value: C.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return C.UnknownJavaScriptObject_methods;
      }
      return C.UnknownJavaScriptObject_methods;
    },
    Interceptor: {
      "^": "Object;",
      toString$0: function(receiver) {
        return H.Primitives_objectToHumanReadableString(receiver);
      }
    },
    JSBool: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      $isbool: 1
    },
    JSNull: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return "null";
      }
    },
    JavaScriptObject: {
      "^": "Interceptor;",
      toString$0: ["super$JavaScriptObject$toString", function(receiver) {
        return String(receiver);
      }]
    },
    PlainJavaScriptObject: {
      "^": "JavaScriptObject;"
    },
    UnknownJavaScriptObject: {
      "^": "JavaScriptObject;"
    },
    JavaScriptFunction: {
      "^": "JavaScriptObject;",
      toString$0: function(receiver) {
        var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
        return dartClosure == null ? this.super$JavaScriptObject$toString(receiver) : J.toString$0$(dartClosure);
      },
      $isFunction: 1,
      $signature: function() {
        return {func: 1, opt: [,,,,,,,,,,,,,,,,]};
      }
    },
    JSArray: {
      "^": "Interceptor;$ti",
      checkGrowable$1: function(receiver, reason) {
        if (!!receiver.fixed$length)
          throw H.wrapException(new P.UnsupportedError(reason));
      },
      add$1: function(receiver, value) {
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
        this.checkGrowable$1(receiver, "add");
        receiver.push(value);
      },
      get$last: function(receiver) {
        var t1 = receiver.length;
        if (t1 > 0)
          return H.assertSubtypeOfRuntimeType(receiver[t1 - 1], H.getTypeArgumentByIndex(receiver, 0));
        throw H.wrapException(H.IterableElementError_noElement());
      },
      toString$0: function(receiver) {
        return P.IterableBase_iterableToFullString(receiver, "[", "]");
      },
      get$iterator: function(receiver) {
        var t1 = H.getTypeArgumentByIndex(receiver, 0);
        return H.assertSubtype(new J.ArrayIterator(H.assertSubtype(receiver, "$isJSArray", [t1], "$asJSArray"), receiver.length, 0, H.assertSubtypeOfRuntimeType(null, t1), [t1]), "$isIterator", [t1], "$asIterator");
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      $isList: 1,
      $asList: null,
      $isIterable: 1,
      $asIterable: null
    },
    JSUnmodifiableArray: {
      "^": "JSArray;$ti"
    },
    ArrayIterator: {
      "^": "Object;_iterable,_length,_index,_current,$ti",
      set$_current: function(_current) {
        this._current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
      },
      get$current: function() {
        return H.assertSubtypeOfRuntimeType(this._current, H.getTypeArgumentByIndex(this, 0));
      },
      moveNext$0: function() {
        var t1, $length, t2;
        t1 = this._iterable;
        $length = t1.length;
        if (this._length !== $length)
          throw H.wrapException(H.throwConcurrentModificationError(t1));
        t2 = this._index;
        if (t2 >= $length) {
          this.set$_current(null);
          return false;
        }
        this.set$_current(t1[t2]);
        ++this._index;
        return true;
      },
      $isIterator: 1
    },
    JSNumber: {
      "^": "Interceptor;",
      toInt$0: function(receiver) {
        var t1;
        if (receiver >= -2147483648 && receiver <= 2147483647)
          return receiver | 0;
        if (isFinite(receiver)) {
          t1 = receiver < 0 ? H.doubleTypeCheck(Math.ceil(receiver)) : H.doubleTypeCheck(Math.floor(receiver));
          return t1 + 0;
        }
        throw H.wrapException(new P.UnsupportedError("" + receiver + ".toInt()"));
      },
      floor$0: function(receiver) {
        var truncated, d;
        if (receiver >= 0) {
          if (receiver <= 2147483647)
            return receiver | 0;
        } else if (receiver >= -2147483648) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated - 1;
        }
        d = Math.floor(receiver);
        if (isFinite(d))
          return d;
        throw H.wrapException(new P.UnsupportedError("" + receiver + ".floor()"));
      },
      toString$0: function(receiver) {
        if (receiver === 0 && 1 / receiver < 0)
          return "-0.0";
        else
          return "" + receiver;
      },
      $tdiv: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        if ((receiver | 0) === receiver)
          if (other >= 1 || false)
            return receiver / other | 0;
        return this._tdivSlow$1(receiver, other);
      },
      _tdivSlow$1: function(receiver, other) {
        var quotient = receiver / other;
        if (quotient >= -2147483648 && quotient <= 2147483647)
          return quotient | 0;
        if (quotient > 0) {
          if (quotient !== 1 / 0)
            return Math.floor(quotient);
        } else if (quotient > -1 / 0)
          return Math.ceil(quotient);
        throw H.wrapException(new P.UnsupportedError("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + other));
      },
      $isnum: 1
    },
    JSInt: {
      "^": "JSNumber;",
      $isdouble: 1,
      $isnum: 1,
      $isint: 1
    },
    JSDouble: {
      "^": "JSNumber;",
      $isdouble: 1,
      $isnum: 1
    },
    JSString: {
      "^": "Interceptor;",
      _codeUnitAt$1: function(receiver, index) {
        if (index >= receiver.length)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver.charCodeAt(index);
      },
      substring$2: function(receiver, startIndex, endIndex) {
        if (endIndex == null)
          endIndex = receiver.length;
        if (startIndex > endIndex)
          throw H.wrapException(P.RangeError$value(startIndex, null, null));
        if (endIndex > receiver.length)
          throw H.wrapException(P.RangeError$value(endIndex, null, null));
        return receiver.substring(startIndex, endIndex);
      },
      substring$1: function($receiver, startIndex) {
        return this.substring$2($receiver, startIndex, null);
      },
      toString$0: function(receiver) {
        return receiver;
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      $isString: 1
    }
  }], ["dart._internal", "dart:_internal",, H, {
    "^": "",
    IterableElementError_noElement: function() {
      return new P.StateError("No element");
    },
    ListIterator: {
      "^": "Object;__internal$_iterable,__internal$_length,__internal$_index,__internal$_current,$ti",
      set$__internal$_current: function(_current) {
        this.__internal$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
      },
      get$current: function() {
        return H.assertSubtypeOfRuntimeType(this.__internal$_current, H.getTypeArgumentByIndex(this, 0));
      },
      moveNext$0: function() {
        var t1, $length, t2;
        t1 = this.__internal$_iterable;
        $length = t1.length;
        if (this.__internal$_length !== $length)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        t2 = this.__internal$_index;
        if (t2 >= $length) {
          this.set$__internal$_current(null);
          return false;
        }
        this.set$__internal$_current(H.assertSubtypeOfRuntimeType(t1[t2], H.getRuntimeTypeArgument(t1, "ListMixin", 0)));
        ++this.__internal$_index;
        return true;
      },
      $isIterator: 1
    },
    FixedLengthListMixin: {
      "^": "Object;$ti"
    }
  }], ["_js_helper", "dart:_js_helper",, H, {
    "^": "",
    getType: function(index) {
      return init.types[index];
    },
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return !!J.getInterceptor(object).$isJavaScriptIndexingBehavior;
    },
    S: function(value) {
      var res;
      if (typeof value === "string")
        return value;
      if (typeof value === "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      if (typeof res !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return res;
    },
    Primitives_objectTypeName: function(object) {
      var interceptor, interceptorConstructor, interceptorConstructorName, $name, dispatchName, objectConstructor, match, decompiledName;
      interceptor = J.getInterceptor(object);
      interceptorConstructor = interceptor.constructor;
      if (typeof interceptorConstructor == "function") {
        interceptorConstructorName = interceptorConstructor.name;
        $name = typeof interceptorConstructorName === "string" ? interceptorConstructorName : null;
      } else
        $name = null;
      if ($name == null || interceptor === C.Interceptor_methods || !!J.getInterceptor(object).$isUnknownJavaScriptObject) {
        dispatchName = C.JS_CONST_u2C(object);
        if (dispatchName === "Object") {
          objectConstructor = object.constructor;
          if (typeof objectConstructor == "function") {
            match = String(objectConstructor).match(/^\s*function\s*([\w$]*)\s*\(/);
            decompiledName = match == null ? null : match[1];
            if (typeof decompiledName === "string" && /^\w+$/.test(decompiledName))
              $name = H.stringTypeCheck(decompiledName);
          }
          if ($name == null)
            $name = dispatchName;
        } else
          $name = dispatchName;
      }
      $name = $name;
      if ($name.length > 1 && C.JSString_methods._codeUnitAt$1($name, 0) === 36)
        $name = C.JSString_methods.substring$1($name, 1);
      return function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }($name + H.joinArguments(H.listTypeCheck(H.getRuntimeTypeInfo(object)), 0, null), init.mangledGlobalNames);
    },
    Primitives_objectToHumanReadableString: function(object) {
      return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
    },
    Primitives_dateNow: [function() {
      return Date.now();
    }, "call$0", "_js_helper_Primitives_dateNow$closure", 0, 0, 4],
    Primitives_initTicker: function() {
      var $window, performance;
      if ($.Primitives_timerFrequency != null)
        return;
      $.Primitives_timerFrequency = 1000;
      $.Primitives_timerTicks = H.interceptedTypeCheck(H._js_helper_Primitives_dateNow$closure(), "$isFunction");
      if (typeof window == "undefined")
        return;
      $window = window;
      if ($window == null)
        return;
      performance = $window.performance;
      if (performance == null)
        return;
      if (typeof performance.now != "function")
        return;
      $.Primitives_timerFrequency = 1000000;
      $.Primitives_timerTicks = new H.Primitives_initTicker_closure(performance);
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length;
      if (typeof index !== "number" || Math.floor(index) !== index)
        return new P.ArgumentError(true, index, "index", null);
      $length = J.get$length$asx(indexable);
      if (index < 0 || index >= $length)
        return P.IndexError$(index, indexable, "index", null, $length);
      return P.RangeError$value(index, "index", null);
    },
    argumentErrorValue: function(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    wrapException: function(ex) {
      var wrapper;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
        wrapper.name = "";
      } else
        wrapper.toString = H.toStringWrapper;
      return wrapper;
    },
    toStringWrapper: function() {
      return J.toString$0$(this.dartException);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(new P.ConcurrentModificationError(collection));
    },
    invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
      H.interceptedTypeCheck(closure, "$isFunction");
      switch (H.intTypeCheck(numberOfArguments)) {
        case 0:
          return new H.invokeClosure_closure(closure).call$0();
        case 1:
          return new H.invokeClosure_closure0(closure, arg1).call$0();
        case 2:
          return new H.invokeClosure_closure1(closure, arg1, arg2).call$0();
        case 3:
          return new H.invokeClosure_closure2(closure, arg1, arg2, arg3).call$0();
        case 4:
          return new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4).call$0();
      }
      throw H.wrapException(new P._Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      H.intTypeCheck(arity);
      if (closure == null)
        return;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, context, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, context, arity, a1, a2, a3, a4);
        };
      }(closure, arity, $, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
      var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
      $function = functions[0];
      callName = $function.$callName;
      if (!!J.getInterceptor(reflectionInfo).$isList) {
        $function.$reflectionInfo = reflectionInfo;
        functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
      } else
        functionType = reflectionInfo;
      $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function() {
          this.$initialize();
        };
      else {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        t1 = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      if (!isStatic) {
        isIntercepted = jsArguments.length == 1 && true;
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
        isIntercepted = false;
      }
      if (typeof functionType == "number")
        signatureFunction = function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getType, functionType);
      else if (typeof functionType == "function")
        if (isStatic)
          signatureFunction = functionType;
        else {
          getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
          signatureFunction = function(f, r) {
            return function() {
              return f.apply({$receiver: r(this)}, arguments);
            };
          }(functionType, getReceiver);
        }
      else
        throw H.wrapException("Error in reflectionInfo.");
      $prototype.$signature = signatureFunction;
      $prototype[callName] = trampoline;
      for (t1 = functions.length, i = 1; i < t1; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          t2 = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = t2;
        }
      }
      $prototype["call*"] = trampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, t2, selfName, $arguments;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 27;
      if (t2)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        selfName = "self" + t1;
        t1 = "return function(){var " + selfName + " = this.";
        t2 = $.BoundClosure_selfFieldNameCache;
        if (t2 == null) {
          t2 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t2;
        }
        return new Function(t1 + H.S(t2) + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      H.assertHelper(1 <= arity && arity < 27);
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Closure_functionCounter = t1 + 1;
      $arguments += t1;
      t1 = "return function(" + $arguments + "){return this.";
      t2 = $.BoundClosure_selfFieldNameCache;
      if (t2 == null) {
        t2 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t2;
      }
      return new Function(t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf, getReceiver;
      getSelf = H.BoundClosure_selfOf;
      getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(new H.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var selfField, t1, stubName, arity, lookedUpFunction, t2, t3, $arguments;
      selfField = H.BoundClosure_selfFieldName();
      t1 = $.BoundClosure_receiverFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("receiver");
        $.BoundClosure_receiverFieldNameCache = t1;
      }
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t2 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t3 = !t2 || arity >= 28;
      if (t3)
        return H.Closure_cspForwardInterceptedCall(arity, !t2, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ");";
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + t2 + "}")();
      }
      H.assertHelper(1 < arity && arity < 28);
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      if (typeof t2 !== "number")
        return t2.$add();
      $.Closure_functionCounter = t2 + 1;
      return new Function(t1 + t2 + "}")();
    },
    closureFromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
      var t1;
      H.listTypeCheck(functions);
      functions.fixed$length = Array;
      if (!!J.getInterceptor(reflectionInfo).$isList) {
        reflectionInfo.fixed$length = Array;
        t1 = reflectionInfo;
      } else
        t1 = reflectionInfo;
      return H.Closure_fromTearOff(receiver, functions, t1, !!isStatic, jsArguments, $name);
    },
    stringTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "String"));
    },
    doubleTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "double"));
    },
    numTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "num"));
    },
    boolTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "boolean")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "bool"));
    },
    intTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number" && Math.floor(value) === value)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "int"));
    },
    propertyTypeError: function(value, property) {
      throw H.wrapException(H.TypeErrorImplementation$(value, H.stringTypeCheck(property).substring(3)));
    },
    interceptedTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if ((typeof value === "object" || typeof value === "function") && J.getInterceptor(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    listTypeCheck: function(value) {
      if (value == null)
        return value;
      if (!!J.getInterceptor(value).$isList)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "List"));
    },
    listSuperNativeTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if (!!J.getInterceptor(value).$isList)
        return value;
      if (J.getInterceptor(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    extractFunctionTypeObjectFrom: function(o) {
      var interceptor = J.getInterceptor(o);
      return "$signature" in interceptor ? interceptor.$signature() : null;
    },
    functionTypeTest: function(value, functionTypeRti) {
      var functionTypeObject;
      if (value == null)
        return false;
      functionTypeObject = H.extractFunctionTypeObjectFrom(value);
      return functionTypeObject == null ? false : H.isFunctionSubtype(functionTypeObject, functionTypeRti);
    },
    functionTypeCheck: function(value, functionTypeRti) {
      var $self, t1;
      if (value == null)
        return value;
      if ($._inTypeAssertion)
        return value;
      $._inTypeAssertion = true;
      try {
        if (H.functionTypeTest(value, functionTypeRti))
          return value;
        $self = H.runtimeTypeToString(functionTypeRti, null);
        t1 = H.TypeErrorImplementation$(value, $self);
        throw H.wrapException(t1);
      } finally {
        $._inTypeAssertion = false;
      }
    },
    assertTest: function(condition) {
      if (true === condition)
        return false;
      if (!!J.getInterceptor(condition).$isFunction)
        condition = condition.call$0();
      if (typeof condition === "boolean")
        return !condition;
      throw H.wrapException(H.TypeErrorImplementation$(condition, "bool"));
    },
    assertHelper: function(condition) {
      if (H.assertTest(condition))
        throw H.wrapException(new P.AssertionError(null));
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(new P.CyclicInitializationError(H.stringTypeCheck(staticName)));
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    setRuntimeTypeInfo: function(target, rti) {
      H.assertHelper(rti == null || typeof rti === "object" && rti !== null && rti.constructor === Array);
      target.$ti = rti;
      return target;
    },
    getRuntimeTypeInfo: function(target) {
      if (target == null)
        return;
      return target.$ti;
    },
    getRuntimeTypeArgument: function(target, substitutionName, index) {
      var $arguments, t1;
      H.stringTypeCheck(substitutionName);
      H.intTypeCheck(index);
      $arguments = H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
      if ($arguments == null)
        t1 = null;
      else {
        H.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t1 = $arguments[index];
      }
      return t1;
    },
    getTypeArgumentByIndex: function(target, index) {
      var rti, t1;
      H.intTypeCheck(index);
      rti = H.getRuntimeTypeInfo(target);
      if (rti == null)
        t1 = null;
      else {
        H.assertHelper(typeof rti === "object" && rti !== null && rti.constructor === Array);
        t1 = rti[index];
      }
      return t1;
    },
    runtimeTypeToString: function(rti, onTypeVariable) {
      var typedefInfo;
      if (rti == null)
        return "dynamic";
      if (typeof rti === "object" && rti !== null && rti.constructor === Array) {
        H.assertHelper(true);
        H.assertHelper(true);
        return rti[0].builtin$cls + H.joinArguments(rti, 1, onTypeVariable);
      }
      if (typeof rti == "function")
        return rti.builtin$cls;
      if (typeof rti === "number" && Math.floor(rti) === rti)
        return H.S(rti);
      if (typeof rti.func != "undefined") {
        typedefInfo = rti.typedef;
        if (typedefInfo != null)
          return H.runtimeTypeToString(typedefInfo, onTypeVariable);
        return H._functionRtiToString(rti, onTypeVariable);
      }
      return "unknown-reified-type";
    },
    _functionRtiToString: function(rti, onTypeVariable) {
      var returnTypeText, $arguments, t1, argumentsText, sep, _i, argument, optionalArguments, namedArguments, t2, $name;
      returnTypeText = !!rti.v ? "void" : H.runtimeTypeToString(rti.ret, onTypeVariable);
      if ("args" in rti) {
        $arguments = rti.args;
        for (t1 = $arguments.length, argumentsText = "", sep = "", _i = 0; _i < t1; ++_i, sep = ", ") {
          argument = $arguments[_i];
          argumentsText = argumentsText + sep + H.runtimeTypeToString(argument, onTypeVariable);
        }
      } else {
        argumentsText = "";
        sep = "";
      }
      if ("opt" in rti) {
        optionalArguments = rti.opt;
        argumentsText += sep + "[";
        for (t1 = optionalArguments.length, sep = "", _i = 0; _i < t1; ++_i, sep = ", ") {
          argument = optionalArguments[_i];
          argumentsText = argumentsText + sep + H.runtimeTypeToString(argument, onTypeVariable);
        }
        argumentsText += "]";
      }
      if ("named" in rti) {
        namedArguments = rti.named;
        argumentsText += sep + "{";
        for (t1 = H.extractKeys(namedArguments), t2 = t1.length, sep = "", _i = 0; _i < t2; ++_i, sep = ", ") {
          $name = H.stringTypeCheck(t1[_i]);
          argumentsText = argumentsText + sep + H.runtimeTypeToString(namedArguments[$name], onTypeVariable) + (" " + H.S($name));
        }
        argumentsText += "}";
      }
      return "(" + argumentsText + ") => " + returnTypeText;
    },
    joinArguments: function(types, startIndex, onTypeVariable) {
      var t1, buffer, index, firstArgument, allDynamic, argument;
      if (types == null)
        return "";
      t1 = typeof types === "object" && types !== null && types.constructor === Array;
      H.assertHelper(t1);
      buffer = new P.StringBuffer("");
      for (index = startIndex, firstArgument = true, allDynamic = true; H.assertHelper(t1), index < types.length; ++index) {
        if (firstArgument)
          firstArgument = false;
        else
          buffer._contents += ", ";
        H.assertHelper(t1);
        argument = types[index];
        if (argument != null)
          allDynamic = false;
        buffer._contents += H.runtimeTypeToString(argument, onTypeVariable);
      }
      return allDynamic ? "" : "<" + buffer.toString$0(0) + ">";
    },
    substitute: function(substitution, $arguments) {
      if (substitution == null)
        return $arguments;
      H.assertHelper(typeof substitution == "function");
      H.assertHelper($arguments == null || typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      substitution = H.invokeOn(substitution, null, $arguments);
      if (substitution == null)
        return;
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        return substitution;
      if (typeof substitution == "function")
        return H.invokeOn(substitution, null, $arguments);
      return $arguments;
    },
    checkSubtype: function(object, isField, checks, asField) {
      var $arguments, interceptor;
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return false;
      $arguments = H.getRuntimeTypeInfo(object);
      interceptor = J.getInterceptor(object);
      if (interceptor[isField] == null)
        return false;
      return H.areSubtypes(H.substitute(interceptor[asField], $arguments), checks);
    },
    assertSubtype: function(object, isField, checks, asField) {
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return object;
      if (H.checkSubtype(object, isField, checks, asField))
        return object;
      throw H.wrapException(H.TypeErrorImplementation$(object, function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }(isField.substring(3) + H.joinArguments(checks, 0, null), init.mangledGlobalNames)));
    },
    areSubtypes: function(s, t) {
      var t1, t2, t3, len, i;
      if (s == null || t == null)
        return true;
      t1 = typeof s === "object" && s !== null && s.constructor === Array;
      H.assertHelper(t1);
      t2 = typeof t === "object" && t !== null && t.constructor === Array;
      H.assertHelper(t2);
      H.assertHelper(t1);
      t3 = s.length;
      H.assertHelper(t2);
      H.assertHelper(t3 === t.length);
      H.assertHelper(t1);
      len = s.length;
      for (i = 0; i < len; ++i) {
        H.assertHelper(t1);
        t3 = s[i];
        H.assertHelper(t2);
        if (!H.isSubtype(t3, t[i]))
          return false;
      }
      return true;
    },
    checkSubtypeOfRuntimeType: function(o, t) {
      var rti, type, targetSignatureFunction;
      if (o == null)
        return t == null || t.builtin$cls === "Object" || t.builtin$cls === "Null";
      if (t == null)
        return true;
      rti = H.getRuntimeTypeInfo(o);
      o = J.getInterceptor(o);
      type = o.constructor;
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      if ('func' in t) {
        targetSignatureFunction = o.$signature;
        if (targetSignatureFunction == null)
          return false;
        return H.isFunctionSubtype(H.invokeOn(targetSignatureFunction, o, null), t);
      }
      return H.isSubtype(type, t);
    },
    assertSubtypeOfRuntimeType: function(object, type) {
      if (object != null && !H.checkSubtypeOfRuntimeType(object, type))
        throw H.wrapException(H.TypeErrorImplementation$(object, H.runtimeTypeToString(type, null)));
      return object;
    },
    isSubtype: function(s, t) {
      var t1, typeOfS, t2, typeOfT, typeOfTString, substitution;
      if (s === t)
        return true;
      if (s == null || t == null)
        return true;
      if (s.builtin$cls === "Null")
        return true;
      if ('func' in t)
        return H.isFunctionSubtype(s, t);
      if ('func' in s)
        return t.builtin$cls === "Function" || t.builtin$cls === "Object";
      t1 = typeof s === "object" && s !== null && s.constructor === Array;
      if (t1) {
        H.assertHelper(true);
        typeOfS = s[0];
      } else
        typeOfS = s;
      t2 = typeof t === "object" && t !== null && t.constructor === Array;
      if (t2) {
        H.assertHelper(true);
        typeOfT = t[0];
      } else
        typeOfT = t;
      if (typeOfT !== typeOfS) {
        typeOfTString = H.runtimeTypeToString(typeOfT, null);
        if (!('$is' + typeOfTString in typeOfS.prototype))
          return false;
        substitution = typeOfS.prototype["$as" + typeOfTString];
      } else
        substitution = null;
      if (!t1 && substitution == null || !t2)
        return true;
      t1 = t1 ? s.slice(1) : null;
      t2 = t2 ? t.slice(1) : null;
      return H.areSubtypes(H.substitute(substitution, t1), t2);
    },
    areAssignable: function(s, t, allowShorter) {
      var t1, t2, sLength, tLength, i, t3, t4;
      H.listTypeCheck(s);
      H.listTypeCheck(t);
      t1 = t == null;
      if (t1 && s == null)
        return true;
      if (t1)
        return allowShorter;
      if (s == null)
        return false;
      t1 = typeof s === "object" && s !== null && s.constructor === Array;
      H.assertHelper(t1);
      t2 = typeof t === "object" && t !== null && t.constructor === Array;
      H.assertHelper(t2);
      H.assertHelper(t1);
      sLength = s.length;
      H.assertHelper(t2);
      tLength = t.length;
      if (allowShorter) {
        if (sLength < tLength)
          return false;
      } else if (sLength !== tLength)
        return false;
      for (i = 0; i < tLength; ++i) {
        H.assertHelper(t1);
        t3 = s[i];
        H.assertHelper(t2);
        t4 = t[i];
        if (!(H.isSubtype(t3, t4) || H.isSubtype(t4, t3)))
          return false;
      }
      return true;
    },
    areAssignableMaps: function(s, t) {
      var t1, names, i, $name, tType, sType;
      if (t == null)
        return true;
      if (s == null)
        return false;
      H.assertHelper(typeof s == 'object');
      H.assertHelper(typeof t == 'object');
      t1 = H.listTypeCheck(Object.getOwnPropertyNames(t));
      t1.fixed$length = Array;
      names = t1;
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (!Object.hasOwnProperty.call(s, $name))
          return false;
        tType = t[$name];
        sType = s[$name];
        if (!(H.isSubtype(tType, sType) || H.isSubtype(sType, tType)))
          return false;
      }
      return true;
    },
    isFunctionSubtype: function(s, t) {
      var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, t1, t2, pos, t3, t4, tPos, sPos;
      H.assertHelper('func' in t);
      if (!('func' in s))
        return false;
      if ("v" in s) {
        if (!("v" in t) && "ret" in t)
          return false;
      } else if (!("v" in t)) {
        sReturnType = s.ret;
        tReturnType = t.ret;
        if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
          return false;
      }
      sParameterTypes = s.args;
      tParameterTypes = t.args;
      sOptionalParameterTypes = s.opt;
      tOptionalParameterTypes = t.opt;
      if (sParameterTypes != null) {
        H.assertHelper(typeof sParameterTypes === "object" && sParameterTypes !== null && sParameterTypes.constructor === Array);
        sParametersLen = sParameterTypes.length;
      } else
        sParametersLen = 0;
      if (tParameterTypes != null) {
        H.assertHelper(typeof tParameterTypes === "object" && tParameterTypes !== null && tParameterTypes.constructor === Array);
        tParametersLen = tParameterTypes.length;
      } else
        tParametersLen = 0;
      if (sOptionalParameterTypes != null) {
        H.assertHelper(typeof sOptionalParameterTypes === "object" && sOptionalParameterTypes !== null && sOptionalParameterTypes.constructor === Array);
        sOptionalParametersLen = sOptionalParameterTypes.length;
      } else
        sOptionalParametersLen = 0;
      if (tOptionalParameterTypes != null) {
        H.assertHelper(typeof tOptionalParameterTypes === "object" && tOptionalParameterTypes !== null && tOptionalParameterTypes.constructor === Array);
        tOptionalParametersLen = tOptionalParameterTypes.length;
      } else
        tOptionalParametersLen = 0;
      if (sParametersLen > tParametersLen)
        return false;
      if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
        return false;
      if (sParametersLen === tParametersLen) {
        if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
          return false;
        if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
          return false;
      } else {
        for (t1 = typeof sParameterTypes === "object" && sParameterTypes !== null && sParameterTypes.constructor === Array, t2 = typeof tParameterTypes === "object" && tParameterTypes !== null && tParameterTypes.constructor === Array, pos = 0; pos < sParametersLen; ++pos) {
          H.assertHelper(t1);
          t3 = sParameterTypes[pos];
          H.assertHelper(t2);
          t4 = tParameterTypes[pos];
          if (!(H.isSubtype(t3, t4) || H.isSubtype(t4, t3)))
            return false;
        }
        for (t1 = typeof sOptionalParameterTypes === "object" && sOptionalParameterTypes !== null && sOptionalParameterTypes.constructor === Array, tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
          H.assertHelper(t1);
          t3 = sOptionalParameterTypes[sPos];
          H.assertHelper(t2);
          t4 = tParameterTypes[tPos];
          if (!(H.isSubtype(t3, t4) || H.isSubtype(t4, t3)))
            return false;
        }
        for (t2 = typeof tOptionalParameterTypes === "object" && tOptionalParameterTypes !== null && tOptionalParameterTypes.constructor === Array, tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
          H.assertHelper(t1);
          t3 = sOptionalParameterTypes[sPos];
          H.assertHelper(t2);
          t4 = tOptionalParameterTypes[tPos];
          if (!(H.isSubtype(t3, t4) || H.isSubtype(t4, t3)))
            return false;
        }
      }
      return H.areAssignableMaps(s.named, t.named);
    },
    invokeOn: function($function, receiver, $arguments) {
      H.assertHelper(typeof $function == "function");
      H.assertHelper($arguments == null || typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
      return $function.apply(receiver, $arguments);
    },
    toStringForNativeObject: function(obj) {
      var t1 = $.getTagFunction;
      return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
    },
    hashCodeForNativeObject: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, H.stringTypeCheck(property), {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor: function(obj) {
      var tag, record, interceptor, interceptorClass, mark, t1;
      H.assertHelper(!(obj instanceof P.Object));
      tag = H.stringTypeCheck($.getTagFunction.call$1(obj));
      record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        tag = H.stringTypeCheck($.alternateTagFunction.call$2(obj, tag));
        if (tag != null) {
          record = $.dispatchRecordsForInstanceTags[tag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[tag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[tag];
        }
      }
      if (interceptorClass == null)
        return;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(new P.UnimplementedError(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks: function() {
      var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
      hooks = C.JS_CONST_bDt();
      hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc, H.applyHooksTransformer(C.JS_CONST_4hp, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_u2C), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    ReflectionInfo: {
      "^": "Object;jsFunction,data,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,cachedSortedIndices",
      static: {
        ReflectionInfo_ReflectionInfo: function(jsFunction) {
          var data, requiredParametersInfo, optionalParametersInfo;
          data = jsFunction.$reflectionInfo;
          if (data == null)
            return;
          data.fixed$length = Array;
          data = data;
          requiredParametersInfo = data[0];
          optionalParametersInfo = data[1];
          return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParametersInfo >> 1, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2], null);
        }
      }
    },
    Primitives_initTicker_closure: {
      "^": "Closure:0;performance",
      call$0: function() {
        return C.JSNumber_methods.floor$0(1000 * this.performance.now());
      }
    },
    invokeClosure_closure: {
      "^": "Closure:0;closure",
      call$0: function() {
        return this.closure.call$0();
      }
    },
    invokeClosure_closure0: {
      "^": "Closure:0;closure,arg1",
      call$0: function() {
        return this.closure.call$1(this.arg1);
      }
    },
    invokeClosure_closure1: {
      "^": "Closure:0;closure,arg1,arg2",
      call$0: function() {
        return this.closure.call$2(this.arg1, this.arg2);
      }
    },
    invokeClosure_closure2: {
      "^": "Closure:0;closure,arg1,arg2,arg3",
      call$0: function() {
        return this.closure.call$3(this.arg1, this.arg2, this.arg3);
      }
    },
    invokeClosure_closure3: {
      "^": "Closure:0;closure,arg1,arg2,arg3,arg4",
      call$0: function() {
        return this.closure.call$4(this.arg1, this.arg2, this.arg3, this.arg4);
      }
    },
    Closure: {
      "^": "Object;",
      toString$0: function(_) {
        return "Closure '" + H.Primitives_objectTypeName(this).trim() + "'";
      },
      get$$call: function() {
        return this;
      },
      $isFunction: 1,
      get$$call: function() {
        return this;
      }
    },
    TearOffClosure: {
      "^": "Closure;"
    },
    StaticClosure: {
      "^": "TearOffClosure;",
      toString$0: function(_) {
        var $name = this.$static_name;
        if ($name == null)
          return "Closure of unknown static method";
        return "Closure '" + $name + "'";
      }
    },
    BoundClosure: {
      "^": "TearOffClosure;_self,_target,_receiver,_name",
      toString$0: function(_) {
        var receiver = this._receiver;
        if (receiver == null)
          receiver = this._self;
        return "Closure '" + H.S(this._name) + "' of " + H.Primitives_objectToHumanReadableString(receiver);
      },
      static: {
        BoundClosure_selfOf: function(closure) {
          return closure._self;
        },
        BoundClosure_receiverOf: function(closure) {
          return closure._receiver;
        },
        BoundClosure_selfFieldName: function() {
          var t1 = $.BoundClosure_selfFieldNameCache;
          if (t1 == null) {
            t1 = H.BoundClosure_computeFieldNamed("self");
            $.BoundClosure_selfFieldNameCache = t1;
          }
          return t1;
        },
        BoundClosure_computeFieldNamed: function(fieldName) {
          var template, t1, names, i, $name;
          template = new H.BoundClosure("self", "target", "receiver", "name");
          t1 = H.listTypeCheck(Object.getOwnPropertyNames(template));
          t1.fixed$length = Array;
          names = t1;
          for (t1 = names.length, i = 0; i < t1; ++i) {
            $name = names[i];
            if (template[$name] === fieldName)
              return $name;
          }
        }
      }
    },
    TypeErrorImplementation: {
      "^": "Error;message",
      toString$0: function(_) {
        return this.message;
      },
      static: {
        TypeErrorImplementation$: function(value, type) {
          return new H.TypeErrorImplementation("type '" + H.Primitives_objectTypeName(value) + "' is not a subtype of type '" + type + "'");
        }
      }
    },
    RuntimeError: {
      "^": "Error;message",
      toString$0: function(_) {
        return "RuntimeError: " + H.S(this.message);
      }
    },
    initHooks_closure: {
      "^": "Closure:1;getTag",
      call$1: function(o) {
        return this.getTag(o);
      }
    },
    initHooks_closure0: {
      "^": "Closure:2;getUnknownTag",
      call$2: function(o, tag) {
        return this.getUnknownTag(o, tag);
      }
    },
    initHooks_closure1: {
      "^": "Closure:3;prototypeForTag",
      call$1: function(tag) {
        return this.prototypeForTag(H.stringTypeCheck(tag));
      }
    }
  }], ["dart._js_names", "dart:_js_names",, H, {
    "^": "",
    extractKeys: function(victim) {
      var t1 = H.setRuntimeTypeInfo(victim ? Object.keys(victim) : [], [null]);
      t1.fixed$length = Array;
      return t1;
    }
  }], ["dart2js._js_primitives", "dart:_js_primitives",, H, {
    "^": "",
    printString: function(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  }], ["dart.typed_data.implementation", "dart:_native_typed_data",, H, {
    "^": "",
    _checkLength: function($length) {
      return $length;
    },
    NativeTypedData: {
      "^": "Interceptor;",
      $isObject: 1,
      "%": ";ArrayBufferView;NativeTypedArray|NativeTypedArray_ListMixin|NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfDouble"
    },
    NativeTypedArray: {
      "^": "NativeTypedData;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: Isolate.functionThatReturnsNull
    },
    NativeTypedArrayOfDouble: {
      "^": "NativeTypedArray_ListMixin_FixedLengthListMixin;"
    },
    NativeTypedArray_ListMixin: {
      "^": "NativeTypedArray+ListMixin;",
      $asListMixin: function() {
        return [P.double];
      },
      $asJavaScriptIndexingBehavior: Isolate.functionThatReturnsNull,
      $asList: function() {
        return [P.double];
      },
      $asIterable: function() {
        return [P.double];
      },
      $isList: 1,
      $isIterable: 1
    },
    NativeTypedArray_ListMixin_FixedLengthListMixin: {
      "^": "NativeTypedArray_ListMixin+FixedLengthListMixin;",
      $asListMixin: function() {
        return [P.double];
      },
      $asJavaScriptIndexingBehavior: Isolate.functionThatReturnsNull,
      $asList: function() {
        return [P.double];
      },
      $asIterable: function() {
        return [P.double];
      }
    },
    NativeFloat64List: {
      "^": "NativeTypedArrayOfDouble;",
      $isNativeFloat64List: 1,
      $isFloat64List: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.double];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.double];
      },
      "%": "Float64Array"
    }
  }], ["dart.collection", "dart:collection",, P, {
    "^": "",
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1, t2;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      t1 = $.$get$_toStringVisiting();
      C.JSArray_methods.add$1(t1, iterable);
      try {
        t2 = buffer;
        t2._contents = P.StringBuffer__writeAll(t2.get$_contents(), iterable, ", ");
      } finally {
        H.assertHelper(C.JSArray_methods.get$last(t1) === iterable);
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      t1 = buffer;
      t1._contents = t1.get$_contents() + rightDelimiter;
      t1 = buffer.get$_contents();
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting: function(o) {
      var i, t1;
      for (i = 0; t1 = $.$get$_toStringVisiting(), i < t1.length; ++i)
        if (o === t1[i])
          return true;
      return false;
    },
    ListMixin: {
      "^": "Object;$ti",
      get$iterator: function(receiver) {
        var t1 = H.getRuntimeTypeArgument(receiver, "ListMixin", 0);
        return H.assertSubtype(new H.ListIterator(H.listSuperNativeTypeCheck(receiver, "$isIterable"), receiver.length, 0, H.assertSubtypeOfRuntimeType(null, t1), [t1]), "$isIterator", [t1], "$asIterator");
      },
      toString$0: function(receiver) {
        return P.IterableBase_iterableToFullString(receiver, "[", "]");
      },
      $isList: 1,
      $asList: null,
      $isIterable: 1,
      $asIterable: null
    }
  }], ["dart.core", "dart:core",, P, {
    "^": "",
    Error_safeToString: function(object) {
      if (typeof object === "number" || typeof object === "boolean" || null == object)
        return J.toString$0$(object);
      if (typeof object === "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    Error__objectToString: function(object) {
      var t1 = J.getInterceptor(object);
      if (!!t1.$isClosure)
        return t1.toString$0(object);
      return H.Primitives_objectToHumanReadableString(object);
    },
    bool: {
      "^": "Object;",
      toString$0: function(_) {
        return this ? "true" : "false";
      }
    },
    "+bool": 0,
    double: {
      "^": "num;"
    },
    "+double": 0,
    Error: {
      "^": "Object;"
    },
    AssertionError: {
      "^": "Error;message",
      toString$0: function(_) {
        return "Assertion failed";
      }
    },
    NullThrownError: {
      "^": "Error;",
      toString$0: function(_) {
        return "Throw of null.";
      }
    },
    ArgumentError: {
      "^": "Error;_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "Invalid argument" + (!this._hasValue ? "(s)" : "");
      },
      get$_errorExplanation: function() {
        return "";
      },
      toString$0: function(_) {
        var t1, nameString, message, prefix, explanation, errorValue;
        t1 = this.name;
        nameString = t1 != null ? " (" + t1 + ")" : "";
        t1 = this.message;
        message = t1 == null ? "" : ": " + t1;
        prefix = this.get$_errorName() + nameString + message;
        if (!this._hasValue)
          return prefix;
        explanation = this.get$_errorExplanation();
        errorValue = P.Error_safeToString(this.invalidValue);
        return prefix + explanation + ": " + H.S(errorValue);
      }
    },
    RangeError: {
      "^": "ArgumentError;start,end,_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "RangeError";
      },
      get$_errorExplanation: function() {
        var t1, explanation;
        H.assertHelper(this._hasValue);
        t1 = this.start;
        if (t1 == null)
          explanation = "";
        else
          explanation = ": Not greater than or equal to " + H.S(t1);
        return explanation;
      },
      static: {
        RangeError$value: function(value, $name, message) {
          return new P.RangeError(null, null, true, value, $name, "Value not in range");
        }
      }
    },
    IndexError: {
      "^": "ArgumentError;indexable,length>,_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "RangeError";
      },
      get$_errorExplanation: function() {
        H.assertHelper(this._hasValue);
        var t1 = this.invalidValue;
        if (typeof t1 !== "number")
          return t1.$lt();
        if (t1 < 0)
          return ": index must not be negative";
        t1 = this.length;
        if (t1 === 0)
          return ": no indices are valid";
        return ": index should be less than " + t1;
      },
      $isRangeError: 1,
      static: {
        IndexError$: function(invalidValue, indexable, $name, message, $length) {
          return new P.IndexError(indexable, $length, true, invalidValue, $name, "Index out of range");
        }
      }
    },
    UnsupportedError: {
      "^": "Error;message",
      toString$0: function(_) {
        return "Unsupported operation: " + this.message;
      }
    },
    UnimplementedError: {
      "^": "Error;message",
      toString$0: function(_) {
        var t1 = this.message;
        return t1 != null ? "UnimplementedError: " + t1 : "UnimplementedError";
      }
    },
    StateError: {
      "^": "Error;message",
      toString$0: function(_) {
        return "Bad state: " + this.message;
      }
    },
    ConcurrentModificationError: {
      "^": "Error;modifiedObject",
      toString$0: function(_) {
        var t1 = this.modifiedObject;
        if (t1 == null)
          return "Concurrent modification during iteration.";
        return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
      }
    },
    CyclicInitializationError: {
      "^": "Error;variableName",
      toString$0: function(_) {
        var t1 = this.variableName;
        return t1 == null ? "Reading static variable during its initialization" : "Reading static variable '" + t1 + "' during its initialization";
      }
    },
    _Exception: {
      "^": "Object;message",
      toString$0: function(_) {
        return "Exception: " + this.message;
      },
      $isException: 1
    },
    int: {
      "^": "num;"
    },
    "+int": 0,
    List: {
      "^": "Object;$ti",
      $asList: null,
      $isIterable: 1,
      $asIterable: null
    },
    "+List": 0,
    Null: {
      "^": "Object;",
      toString$0: function(_) {
        return "null";
      }
    },
    "+Null": 0,
    num: {
      "^": "Object;"
    },
    "+num": 0,
    Object: {
      "^": ";",
      toString$0: function(_) {
        return H.Primitives_objectToHumanReadableString(this);
      },
      toString: function() {
        return this.toString$0(this);
      }
    },
    Stopwatch: {
      "^": "Object;_start,_stop"
    },
    String: {
      "^": "Object;"
    },
    "+String": 0,
    StringBuffer: {
      "^": "Object;_contents<",
      get$length: function(_) {
        return this._contents.length;
      },
      toString$0: function(_) {
        var t1 = this._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      static: {
        StringBuffer__writeAll: function(string, objects, separator) {
          var iterator = J.get$iterator$ax(objects);
          if (!iterator.moveNext$0())
            return string;
          if (separator.length === 0) {
            do
              string += H.S(iterator.get$current());
            while (iterator.moveNext$0());
          } else {
            string += H.S(iterator.get$current());
            for (; iterator.moveNext$0();)
              string = string + separator + H.S(iterator.get$current());
          }
          return string;
        }
      }
    }
  }], ["benchmark_base", "../../common/dart/BenchmarkBase.dart",, V, {
    "^": "",
    BenchmarkBase_measureFor: function(f, timeMinimum) {
      var t1, iter, elapsed, t2;
      if ($.Stopwatch__frequency == null) {
        H.Primitives_initTicker();
        $.Stopwatch__frequency = $.Primitives_timerFrequency;
      }
      t1 = H.intTypeCheck($.Primitives_timerTicks.call$0());
      if (typeof t1 !== "number")
        return t1.$sub();
      t1 -= 0;
      for (iter = 0, elapsed = 0; elapsed < timeMinimum;) {
        f.call$0();
        t2 = H.intTypeCheck($.Primitives_timerTicks.call$0());
        if (typeof t2 !== "number")
          return t2.$sub();
        elapsed = C.JSInt_methods.$tdiv((t2 - t1) * 1000, $.Stopwatch__frequency);
        ++iter;
      }
      return 1000 * elapsed / iter;
    },
    BenchmarkBase: {
      "^": "Object;",
      measure$0: function() {
        V.BenchmarkBase_measureFor(new V.BenchmarkBase_measure_closure(this), 100);
        return V.BenchmarkBase_measureFor(new V.BenchmarkBase_measure_closure0(this), 2000);
      }
    },
    BenchmarkBase_measure_closure: {
      "^": "Closure:0;$this",
      call$0: function() {
        M.FluidMotion_runFluidMotion();
      }
    },
    BenchmarkBase_measure_closure0: {
      "^": "Closure:0;$this",
      call$0: function() {
        M.FluidMotion_runFluidMotion();
      }
    }
  }], ["", "FluidMotion.dart",, M, {
    "^": "",
    main: function() {
      H.printString("FluidMotion(RunTime): " + H.S(new M.FluidMotion("FluidMotion").measure$0()) + " us.");
    },
    FluidMotion: {
      "^": "BenchmarkBase;name",
      static: {
        FluidMotion_setupFluidMotion: function() {
          $.FluidMotion_framesTillAddingPoints = 0;
          $.FluidMotion_framesBetweenAddingPoints = 5;
          var t1 = M.FluidField$(null, 128, 128, 20);
          $.FluidField__lastCreated = t1;
          H.assertHelper(20 === t1.iterations);
          t1 = $.FluidField__lastCreated;
          $.FluidMotion_solver = t1;
          t1.displayFunc = new M.FluidMotion_setupFluidMotion_closure();
          t1.uiCallback = M.FluidMotion_FluidMotion_prepareFrame$closure();
        },
        FluidMotion_runFluidMotion: function() {
          var i, t1, u0, v0, temp, temp0, t2, t3, t4, t5, t6;
          M.FluidMotion_setupFluidMotion();
          for (i = 0; i < 10; ++i) {
            t1 = $.FluidMotion_solver;
            t1.queryUI$3(t1.dens_prev, t1.u_prev, t1.v_prev);
            u0 = t1.u;
            v0 = t1.v;
            temp = t1.u_prev;
            temp0 = t1.v_prev;
            t2 = t1.dt;
            t1.addFields$3(u0, temp, t2);
            t1.addFields$3(v0, temp0, t2);
            t1.lin_solve2$6(temp, u0, temp0, v0, 0, 1);
            t1.project$4(temp, temp0, u0, v0);
            t1.advect$6(1, u0, temp, temp, temp0, t2);
            t1.advect$6(2, v0, temp0, temp, temp0, t2);
            t1.project$4(u0, v0, temp, temp0);
            t3 = t1.dens;
            t4 = t1.dens_prev;
            t5 = t1.u;
            t6 = t1.v;
            t1.addFields$3(t3, t4, t2);
            t1.lin_solve$5(0, t4, t3, 0, 1);
            t1.advect$6(0, t3, t4, t5, t6, t2);
            t2 = t1.dens;
            t6 = t1.u;
            t5 = t1.v;
            t4 = t1.rowSize;
            t1.displayFunc.call$1(new M.Field(t2, t6, t5, t4));
          }
          $.FluidMotion_solver.validate$3(758.9012130174812, -352.56376676179076, -357.3690235879736);
        },
        FluidMotion_addPoints: function(field) {
          var t1, t2, i, i0, t3, t4, t5;
          for (t1 = field.dens, t2 = field.rowSize, i = 1; i <= 64; i = i0) {
            field.setVelocity$4(i, i, 64, 64);
            i0 = i + 1;
            t3 = i0 + i0 * t2;
            t4 = t1.length;
            if (t3 >= t4)
              return H.ioore(t1, t3);
            t1[t3] = 5;
            t3 = 64 - i;
            field.setVelocity$4(i, t3, -64, -64);
            t3 = i0 + (t3 + 1) * t2;
            if (t3 < 0 || t3 >= t4)
              return H.ioore(t1, t3);
            t1[t3] = 20;
            t3 = 128 - i;
            t5 = 64 + i;
            field.setVelocity$4(t3, t5, -64, -64);
            t5 = t3 + 1 + (t5 + 1) * t2;
            if (t5 >= t4)
              return H.ioore(t1, t5);
            t1[t5] = 30;
          }
        },
        FluidMotion_prepareFrame: [function(field) {
          var t1 = $.FluidMotion_framesTillAddingPoints;
          if (t1 === 0) {
            M.FluidMotion_addPoints(field);
            t1 = $.FluidMotion_framesBetweenAddingPoints;
            $.FluidMotion_framesTillAddingPoints = t1;
            $.FluidMotion_framesBetweenAddingPoints = t1 + 1;
          } else
            $.FluidMotion_framesTillAddingPoints = t1 - 1;
        }, "call$1", "FluidMotion_FluidMotion_prepareFrame$closure", 2, 0, 5]
      }
    },
    FluidMotion_setupFluidMotion_closure: {
      "^": "Closure:1;",
      call$1: function(a) {
      }
    },
    FluidField: {
      "^": "Object;canvas,iterations,dt,size,dens,dens_prev,u,u_prev,v,v_prev,width,height,rowSize,displayFunc,uiCallback",
      validate$3: function(expectedDens, expectedU, expectedV) {
        var t1, t2, t3, t4, sumDens, sumU, sumV, i;
        for (t1 = this.dens, t2 = t1.length, t3 = this.u, t4 = this.v, sumDens = 0, sumU = 0, sumV = 0, i = 0; i < t2; ++i) {
          sumDens += t1[i];
          if (i >= t3.length)
            return H.ioore(t3, i);
          sumU += t3[i];
          if (i >= t4.length)
            return H.ioore(t4, i);
          sumV += t4[i];
        }
        if (!(Math.abs(H.doubleTypeCheck(sumDens) - expectedDens) < 0.000001) || !(Math.abs(H.doubleTypeCheck(sumU) - H.doubleTypeCheck(expectedU)) < 0.000001) || !(Math.abs(H.doubleTypeCheck(sumV) - H.doubleTypeCheck(expectedV)) < 0.000001))
          throw H.wrapException("Incorrect result");
      },
      addFields$3: function(x, s, dt) {
        var t1, i, t2;
        for (t1 = this.size, i = 0; i < t1; ++i) {
          if (i >= x.length)
            return H.ioore(x, i);
          t2 = x[i];
          if (i >= s.length)
            return H.ioore(s, i);
          x[i] = t2 + dt * s[i];
        }
      },
      set_bnd$2: function(b, x) {
        var t1, t2, t3, t4, t5, i, t6, t7, t8, j, maxEdge;
        if (b === 1) {
          for (t1 = this.width, t2 = this.rowSize, t3 = this.height, t4 = (t3 + 1) * t2, t5 = t3 * t2, i = 1; i <= t1; ++i) {
            t6 = i + t2;
            t7 = x.length;
            if (t6 >= t7)
              return H.ioore(x, t6);
            t6 = x[t6];
            if (i >= t7)
              return H.ioore(x, i);
            x[i] = t6;
            t6 = i + t4;
            t8 = i + t5;
            if (t8 >= t7)
              return H.ioore(x, t8);
            t8 = x[t8];
            if (t6 >= t7)
              return H.ioore(x, t6);
            x[t6] = t8;
          }
          for (t4 = t1 + 1, j = 1; j <= t3; ++j) {
            t5 = j * t2;
            t6 = 1 + t5;
            t7 = x.length;
            if (t6 >= t7)
              return H.ioore(x, t6);
            t6 = x[t6];
            if (t5 >= t7)
              return H.ioore(x, t5);
            x[t5] = -t6;
            t6 = t4 + t5;
            t5 = t1 + t5;
            if (t5 >= t7)
              return H.ioore(x, t5);
            t5 = x[t5];
            if (t6 >= t7)
              return H.ioore(x, t6);
            x[t6] = -t5;
          }
        } else if (b === 2) {
          for (t1 = this.width, t2 = this.rowSize, t3 = this.height, t4 = (t3 + 1) * t2, t5 = t3 * t2, i = 1; i <= t1; ++i) {
            t6 = i + t2;
            t7 = x.length;
            if (t6 >= t7)
              return H.ioore(x, t6);
            t6 = x[t6];
            if (i >= t7)
              return H.ioore(x, i);
            x[i] = -t6;
            t6 = i + t4;
            t8 = i + t5;
            if (t8 >= t7)
              return H.ioore(x, t8);
            t8 = x[t8];
            if (t6 >= t7)
              return H.ioore(x, t6);
            x[t6] = -t8;
          }
          for (t4 = t1 + 1, j = 1; j <= t3; ++j) {
            t5 = j * t2;
            t6 = 1 + t5;
            t7 = x.length;
            if (t6 >= t7)
              return H.ioore(x, t6);
            t6 = x[t6];
            if (t5 >= t7)
              return H.ioore(x, t5);
            x[t5] = t6;
            t6 = t4 + t5;
            t5 = t1 + t5;
            if (t5 >= t7)
              return H.ioore(x, t5);
            t5 = x[t5];
            if (t6 >= t7)
              return H.ioore(x, t6);
            x[t6] = t5;
          }
        } else {
          for (t1 = this.width, t2 = this.rowSize, t3 = this.height, t4 = (t3 + 1) * t2, t5 = t3 * t2, i = 1; i <= t1; ++i) {
            t6 = i + t2;
            t7 = x.length;
            if (t6 >= t7)
              return H.ioore(x, t6);
            t6 = x[t6];
            if (i >= t7)
              return H.ioore(x, i);
            x[i] = t6;
            t6 = i + t4;
            t8 = i + t5;
            if (t8 >= t7)
              return H.ioore(x, t8);
            t8 = x[t8];
            if (t6 >= t7)
              return H.ioore(x, t6);
            x[t6] = t8;
          }
          for (t4 = t1 + 1, j = 1; j <= t3; ++j) {
            t5 = j * t2;
            t6 = 1 + t5;
            t7 = x.length;
            if (t6 >= t7)
              return H.ioore(x, t6);
            t6 = x[t6];
            if (t5 >= t7)
              return H.ioore(x, t5);
            x[t5] = t6;
            t6 = t4 + t5;
            t5 = t1 + t5;
            if (t5 >= t7)
              return H.ioore(x, t5);
            t5 = x[t5];
            if (t6 >= t7)
              return H.ioore(x, t6);
            x[t6] = t5;
          }
        }
        t1 = this.height;
        t2 = this.rowSize;
        maxEdge = (t1 + 1) * t2;
        t3 = x.length;
        if (1 >= t3)
          return H.ioore(x, 1);
        t4 = x[1];
        if (t2 >= t3)
          return H.ioore(x, t2);
        x[0] = 0.5 * (t4 + x[t2]);
        t4 = 1 + maxEdge;
        if (t4 >= t3)
          return H.ioore(x, t4);
        t4 = x[t4];
        t1 *= t2;
        if (t1 >= t3)
          return H.ioore(x, t1);
        t5 = x[t1];
        if (maxEdge >= t3)
          return H.ioore(x, maxEdge);
        x[maxEdge] = 0.5 * (t4 + t5);
        t5 = this.width;
        t4 = t5 + 1;
        if (t5 >= t3)
          return H.ioore(x, t5);
        t6 = x[t5];
        t2 = t4 + t2;
        if (t2 >= t3)
          return H.ioore(x, t2);
        t2 = x[t2];
        if (t4 >= t3)
          return H.ioore(x, t4);
        x[t4] = 0.5 * (t6 + t2);
        t2 = t4 + maxEdge;
        t5 += maxEdge;
        if (t5 >= t3)
          return H.ioore(x, t5);
        t5 = x[t5];
        t1 = t4 + t1;
        if (t1 >= t3)
          return H.ioore(x, t1);
        t1 = x[t1];
        if (t2 >= t3)
          return H.ioore(x, t2);
        x[t2] = 0.5 * (t5 + t1);
      },
      lin_solve$5: function(b, x, x0, a, c) {
        var t1, t2, t3, j, currentRow, i, t4, invC, k, lastRow, nextRow, t5, lastX, t6, currentRow0, t7, t8;
        if (a === 0 && c === 1) {
          for (t1 = this.height, t2 = this.width, t3 = this.rowSize, j = 1; j <= t1; ++j) {
            currentRow = j * t3 + 1;
            for (i = 0; i < t2; ++i) {
              if (currentRow >= x0.length)
                return H.ioore(x0, currentRow);
              t4 = x0[currentRow];
              if (currentRow >= x.length)
                return H.ioore(x, currentRow);
              x[currentRow] = t4;
              ++currentRow;
            }
          }
          this.set_bnd$2(b, x);
        } else {
          invC = 1 / c;
          for (t1 = this.iterations, t2 = this.height, t3 = this.width, t4 = this.rowSize, k = 0; k < t1; ++k) {
            for (j = 1; j <= t2;) {
              lastRow = (j - 1) * t4;
              currentRow = j * t4;
              ++j;
              nextRow = j * t4;
              t5 = x.length;
              if (currentRow >= t5)
                return H.ioore(x, currentRow);
              lastX = x[currentRow];
              ++currentRow;
              for (i = 1; i <= t3; ++i, currentRow = currentRow0) {
                if (currentRow >= x0.length)
                  return H.ioore(x0, currentRow);
                t6 = x0[currentRow];
                currentRow0 = currentRow + 1;
                if (currentRow0 >= t5)
                  return H.ioore(x, currentRow0);
                t7 = x[currentRow0];
                ++lastRow;
                if (lastRow < 0 || lastRow >= t5)
                  return H.ioore(x, lastRow);
                t8 = x[lastRow];
                ++nextRow;
                if (nextRow >= t5)
                  return H.ioore(x, nextRow);
                lastX = (t6 + a * (lastX + t7 + t8 + x[nextRow])) * invC;
                if (currentRow >= t5)
                  return H.ioore(x, currentRow);
                x[currentRow] = lastX;
              }
            }
            this.set_bnd$2(b, x);
          }
        }
      },
      lin_solve2$6: function(x, x0, y, y0, a, c) {
        var t1, t2, t3, j, currentRow, i, t4, invC, k, lastRow, nextRow, t5, lastX, t6, lastY, t7, t8, t9, currentRow0;
        if (a === 0 && c === 1) {
          for (t1 = this.height, t2 = this.width, t3 = this.rowSize, j = 1; j <= t1; ++j) {
            currentRow = j * t3 + 1;
            for (i = 0; i < t2; ++i) {
              if (currentRow >= x0.length)
                return H.ioore(x0, currentRow);
              t4 = x0[currentRow];
              if (currentRow >= x.length)
                return H.ioore(x, currentRow);
              x[currentRow] = t4;
              if (currentRow >= y0.length)
                return H.ioore(y0, currentRow);
              t4 = y0[currentRow];
              if (currentRow >= y.length)
                return H.ioore(y, currentRow);
              y[currentRow] = t4;
              ++currentRow;
            }
          }
          this.set_bnd$2(1, x);
          this.set_bnd$2(2, y);
        } else {
          invC = 1 / c;
          for (t1 = this.iterations, t2 = this.height, t3 = this.width, t4 = this.rowSize, k = 0; k < t1; ++k) {
            for (j = 1; j <= t2;) {
              lastRow = (j - 1) * t4;
              currentRow = j * t4;
              ++j;
              nextRow = j * t4;
              t5 = x.length;
              if (currentRow >= t5)
                return H.ioore(x, currentRow);
              lastX = x[currentRow];
              t6 = y.length;
              if (currentRow >= t6)
                return H.ioore(y, currentRow);
              lastY = y[currentRow];
              ++currentRow;
              for (i = 1; i <= t3; ++i, currentRow = currentRow0) {
                if (currentRow >= x0.length)
                  return H.ioore(x0, currentRow);
                t7 = x0[currentRow];
                if (currentRow >= t5)
                  return H.ioore(x, currentRow);
                t8 = x[currentRow];
                if (lastRow < 0 || lastRow >= t5)
                  return H.ioore(x, lastRow);
                t9 = x[lastRow];
                if (nextRow >= t5)
                  return H.ioore(x, nextRow);
                lastX = (t7 + a * (lastX + t8 + t9 + x[nextRow])) * invC;
                x[currentRow] = lastX;
                if (currentRow >= y0.length)
                  return H.ioore(y0, currentRow);
                t9 = y0[currentRow];
                currentRow0 = currentRow + 1;
                if (currentRow0 >= t6)
                  return H.ioore(y, currentRow0);
                t8 = y[currentRow0];
                ++lastRow;
                if (lastRow >= t6)
                  return H.ioore(y, lastRow);
                t7 = y[lastRow];
                ++nextRow;
                if (nextRow >= t6)
                  return H.ioore(y, nextRow);
                lastY = (t9 + a * (lastY + t8 + t7 + y[nextRow])) * invC;
                if (currentRow >= t6)
                  return H.ioore(y, currentRow);
                y[currentRow] = lastY;
              }
            }
            this.set_bnd$2(1, x);
            this.set_bnd$2(2, y);
          }
        }
      },
      advect$6: function(b, d, d0, u, v, dt) {
        var t1, Wdt0, t2, Hdt0, Wp5, Hp5, t3, j, pos, i, x, y, i0, i1, j0, s1, t10, t00, row1, row2, t4, t5, t6, t7, t8;
        t1 = this.width;
        Wdt0 = dt * t1;
        t2 = this.height;
        Hdt0 = dt * t2;
        Wp5 = t1 + 0.5;
        Hp5 = t2 + 0.5;
        for (t3 = this.rowSize, j = 1; j <= t2; ++j) {
          pos = j * t3;
          for (i = 1; i <= t1; ++i) {
            ++pos;
            if (pos >= u.length)
              return H.ioore(u, pos);
            x = i - Wdt0 * u[pos];
            if (pos >= v.length)
              return H.ioore(v, pos);
            y = j - Hdt0 * v[pos];
            if (x < 0.5)
              x = 0.5;
            else if (x > Wp5)
              x = Wp5;
            i0 = C.JSNumber_methods.toInt$0(x);
            i1 = i0 + 1;
            if (y < 0.5)
              y = 0.5;
            else if (y > Hp5)
              y = Hp5;
            j0 = C.JSNumber_methods.toInt$0(y);
            s1 = x - i0;
            t10 = y - j0;
            t00 = 1 - t10;
            row1 = j0 * t3;
            row2 = (j0 + 1) * t3;
            t4 = i0 + row1;
            t5 = d0.length;
            if (t4 < 0 || t4 >= t5)
              return H.ioore(d0, t4);
            t4 = d0[t4];
            t6 = i0 + row2;
            if (t6 < 0 || t6 >= t5)
              return H.ioore(d0, t6);
            t6 = d0[t6];
            t7 = i1 + row1;
            if (t7 < 0 || t7 >= t5)
              return H.ioore(d0, t7);
            t7 = d0[t7];
            t8 = i1 + row2;
            if (t8 < 0 || t8 >= t5)
              return H.ioore(d0, t8);
            t8 = d0[t8];
            if (pos >= d.length)
              return H.ioore(d, pos);
            d[pos] = (1 - s1) * (t00 * t4 + t10 * t6) + s1 * (t00 * t7 + t10 * t8);
          }
        }
        this.set_bnd$2(b, d);
      },
      project$4: function(u, v, p, div) {
        var t1, t2, h, t3, j, row, previousRow, prevValue, nextValue, nextRow, currentRow, i, t4, t5, t6, t7, wScale, hScale, currentPos, prevPos, nextPos, prevRow;
        t1 = this.width;
        t2 = this.height;
        h = -0.5 / H.doubleTypeCheck(Math.sqrt(t1 * t2));
        for (t3 = this.rowSize, j = 1; j <= t2;) {
          row = j * t3;
          previousRow = (j - 1) * t3;
          prevValue = row - 1;
          nextValue = row + 1;
          ++j;
          nextRow = j * t3;
          for (currentRow = row, i = 1; i <= t1; ++i) {
            ++currentRow;
            ++nextValue;
            t4 = u.length;
            if (nextValue >= t4)
              return H.ioore(u, nextValue);
            t5 = u[nextValue];
            ++prevValue;
            if (prevValue >= t4)
              return H.ioore(u, prevValue);
            t4 = u[prevValue];
            ++nextRow;
            t6 = v.length;
            if (nextRow >= t6)
              return H.ioore(v, nextRow);
            t7 = v[nextRow];
            ++previousRow;
            if (previousRow < 0 || previousRow >= t6)
              return H.ioore(v, previousRow);
            t6 = v[previousRow];
            if (currentRow >= div.length)
              return H.ioore(div, currentRow);
            div[currentRow] = h * (t5 - t4 + t7 - t6);
            if (currentRow >= p.length)
              return H.ioore(p, currentRow);
            p[currentRow] = 0;
          }
        }
        this.set_bnd$2(0, div);
        this.set_bnd$2(0, p);
        this.lin_solve$5(0, p, div, 1, 4);
        wScale = 0.5 * t1;
        hScale = 0.5 * t2;
        for (j = 1; j <= t2;) {
          currentPos = j * t3;
          prevPos = currentPos - 1;
          nextPos = currentPos + 1;
          prevRow = (j - 1) * t3;
          ++j;
          nextRow = j * t3;
          for (i = 1; i <= t1; ++i) {
            ++currentPos;
            if (currentPos >= u.length)
              return H.ioore(u, currentPos);
            t4 = u[currentPos];
            ++nextPos;
            t5 = p.length;
            if (nextPos >= t5)
              return H.ioore(p, nextPos);
            t6 = p[nextPos];
            ++prevPos;
            if (prevPos >= t5)
              return H.ioore(p, prevPos);
            u[currentPos] = t4 - wScale * (t6 - p[prevPos]);
            if (currentPos >= v.length)
              return H.ioore(v, currentPos);
            t6 = v[currentPos];
            ++nextRow;
            if (nextRow >= t5)
              return H.ioore(p, nextRow);
            t4 = p[nextRow];
            ++prevRow;
            if (prevRow < 0 || prevRow >= t5)
              return H.ioore(p, prevRow);
            v[currentPos] = t6 - hScale * (t4 - p[prevRow]);
          }
        }
        this.set_bnd$2(1, u);
        this.set_bnd$2(2, v);
      },
      queryUI$3: function(d, u, v) {
        var t1, i;
        for (t1 = this.size, i = 0; i < t1; ++i) {
          if (i >= d.length)
            return H.ioore(d, i);
          d[i] = 0;
          if (i >= v.length)
            return H.ioore(v, i);
          v[i] = 0;
          if (i >= u.length)
            return H.ioore(u, i);
          u[i] = 0;
        }
        this.uiCallback.call$1(new M.Field(d, u, v, this.rowSize));
      },
      FluidField$4: function(canvas, hRes, wRes, iterations) {
        var t1 = this.size;
        this.dens = new Float64Array(H._checkLength(t1));
        this.dens_prev = new Float64Array(H._checkLength(t1));
        this.u = new Float64Array(H._checkLength(t1));
        this.u_prev = new Float64Array(H._checkLength(t1));
        this.v = new Float64Array(H._checkLength(t1));
        this.v_prev = new Float64Array(H._checkLength(t1));
      },
      static: {
        FluidField$: function(canvas, hRes, wRes, iterations) {
          var t1 = wRes + 2;
          t1 = new M.FluidField(canvas, iterations, 0.1, t1 * (hRes + 2), null, null, null, null, null, null, wRes, hRes, t1, null, null);
          t1.FluidField$4(canvas, hRes, wRes, iterations);
          return t1;
        }
      }
    },
    Field: {
      "^": "Object;dens,u,v,rowSize",
      setVelocity$4: function(x, y, xv, yv) {
        var t1, t2;
        H.doubleTypeCheck(xv);
        H.doubleTypeCheck(yv);
        t1 = this.u;
        t2 = x + 1 + (y + 1) * this.rowSize;
        if (t2 < 0 || t2 >= t1.length)
          return H.ioore(t1, t2);
        t1[t2] = xv;
        t1 = this.v;
        if (t2 >= t1.length)
          return H.ioore(t1, t2);
        t1[t2] = yv;
      }
    }
  }, 1]];
  setupProgram(dart, 0);
  // getInterceptor methods
  J.getInterceptor = function(receiver) {
    if (typeof receiver == "number") {
      if (Math.floor(receiver) == receiver)
        return J.JSInt.prototype;
      return J.JSDouble.prototype;
    }
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return J.JSNull.prototype;
    if (typeof receiver == "boolean")
      return J.JSBool.prototype;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$asx = function(receiver) {
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$ax = function(receiver) {
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.get$iterator$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).get$iterator(receiver);
  };
  J.get$length$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$length(receiver);
  };
  J.toString$0$ = function(receiver) {
    return J.getInterceptor(receiver).toString$0(receiver);
  };
  // Output contains no constant list.
  var $ = Isolate.$isolateProperties;
  C.Interceptor_methods = J.Interceptor.prototype;
  C.JSArray_methods = J.JSArray.prototype;
  C.JSInt_methods = J.JSInt.prototype;
  C.JSNumber_methods = J.JSNumber.prototype;
  C.JSString_methods = J.JSString.prototype;
  C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
  C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
  C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
  C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
  C.JS_CONST_4hp = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
  C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
  C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
  C.JS_CONST_bDt = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
  C.JS_CONST_gkc = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
  C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
  C.JS_CONST_u2C = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
  $.Primitives_timerFrequency = null;
  $.Primitives_timerTicks = null;
  $.Closure_functionCounter = 0;
  $.BoundClosure_selfFieldNameCache = null;
  $.BoundClosure_receiverFieldNameCache = null;
  $._inTypeAssertion = false;
  $.getTagFunction = null;
  $.alternateTagFunction = null;
  $.prototypeForTagFunction = null;
  $.dispatchRecordsForInstanceTags = null;
  $.interceptorsForUncacheableTags = null;
  $.initNativeDispatchFlag = null;
  $.Stopwatch__frequency = null;
  $.FluidMotion_solver = null;
  $.FluidMotion_framesTillAddingPoints = 0;
  $.FluidMotion_framesBetweenAddingPoints = 5;
  $.FluidField__lastCreated = null;
  $ = null;
  init.isHunkLoaded = function(hunkHash) {
    return !!$dart_deferred_initializers$[hunkHash];
  };
  init.deferredInitialized = new Object(null);
  init.isHunkInitialized = function(hunkHash) {
    return init.deferredInitialized[hunkHash];
  };
  init.initializeLoadedHunk = function(hunkHash) {
    $dart_deferred_initializers$[hunkHash]($globals$, $);
    init.deferredInitialized[hunkHash] = true;
  };
  init.deferredLibraryUris = {};
  init.deferredLibraryHashes = {};
  // Empty type-to-interceptor map.
  (function(lazies) {
    for (var i = 0; i < lazies.length;) {
      var fieldName = lazies[i++];
      var getterName = lazies[i++];
      var lazyValue = lazies[i++];
      var staticName = lazies[i++];
      Isolate.$lazy(fieldName, getterName, lazyValue, staticName);
    }
  })(["DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
    return H.getIsolateAffinityTag("_$dart_dartClosure");
  }, "DART_CLOSURE_PROPERTY_NAME", "JS_INTEROP_INTERCEPTOR_TAG", "$get$JS_INTEROP_INTERCEPTOR_TAG", function() {
    return H.getIsolateAffinityTag("_$dart_js");
  }, "JS_INTEROP_INTERCEPTOR_TAG", "_toStringVisiting", "$get$_toStringVisiting", function() {
    return [];
  }, "_toStringVisiting"]);
  Isolate = Isolate.$finishIsolateConstructor(Isolate);
  $ = new Isolate();
  init.metadata = [];
  init.types = [{func: 1}, {func: 1, args: [,]}, {func: 1, args: [, P.String]}, {func: 1, args: [P.String]}, {func: 1, ret: P.num}, {func: 1, v: true, args: [M.Field]}];
  function convertToFastObject(properties) {
    function MyClass() {
    }
    MyClass.prototype = properties;
    new MyClass();
    return properties;
  }
  function convertToSlowObject(properties) {
    properties.__MAGIC_SLOW_PROPERTY = 1;
    delete properties.__MAGIC_SLOW_PROPERTY;
    return properties;
  }
  A = convertToFastObject(A);
  B = convertToFastObject(B);
  C = convertToFastObject(C);
  D = convertToFastObject(D);
  E = convertToFastObject(E);
  F = convertToFastObject(F);
  G = convertToFastObject(G);
  H = convertToFastObject(H);
  J = convertToFastObject(J);
  K = convertToFastObject(K);
  L = convertToFastObject(L);
  M = convertToFastObject(M);
  N = convertToFastObject(N);
  O = convertToFastObject(O);
  P = convertToFastObject(P);
  Q = convertToFastObject(Q);
  R = convertToFastObject(R);
  S = convertToFastObject(S);
  T = convertToFastObject(T);
  U = convertToFastObject(U);
  V = convertToFastObject(V);
  W = convertToFastObject(W);
  X = convertToFastObject(X);
  Y = convertToFastObject(Y);
  Z = convertToFastObject(Z);
  function init() {
    Isolate.$isolateProperties = Object.create(null);
    init.allClasses = map();
    init.getTypeFromName = function(name) {
      return init.allClasses[name];
    };
    init.interceptorsByTag = map();
    init.leafTags = map();
    init.finishedClasses = map();
    Isolate.$lazy = function(fieldName, getterName, lazyValue, staticName, prototype) {
      if (!init.lazies)
        init.lazies = Object.create(null);
      init.lazies[fieldName] = getterName;
      prototype = prototype || Isolate.$isolateProperties;
      var sentinelUndefined = {};
      var sentinelInProgress = {};
      prototype[fieldName] = sentinelUndefined;
      prototype[getterName] = function() {
        var result = this[fieldName];
        if (result == sentinelInProgress)
          H.throwCyclicInit(staticName || fieldName);
        try {
          if (result === sentinelUndefined) {
            this[fieldName] = sentinelInProgress;
            try {
              result = this[fieldName] = lazyValue();
            } finally {
              if (result === sentinelUndefined)
                this[fieldName] = null;
            }
          }
          return result;
        } finally {
          this[getterName] = function() {
            return this[fieldName];
          };
        }
      };
    };
    Isolate.$finishIsolateConstructor = function(oldIsolate) {
      var isolateProperties = oldIsolate.$isolateProperties;
      function Isolate() {
        var staticNames = Object.keys(isolateProperties);
        for (var i = 0; i < staticNames.length; i++) {
          var staticName = staticNames[i];
          this[staticName] = isolateProperties[staticName];
        }
        var lazies = init.lazies;
        var lazyInitializers = lazies ? Object.keys(lazies) : [];
        for (var i = 0; i < lazyInitializers.length; i++)
          this[lazies[lazyInitializers[i]]] = null;
        function ForceEfficientMap() {
        }
        ForceEfficientMap.prototype = this;
        new ForceEfficientMap();
        for (var i = 0; i < lazyInitializers.length; i++) {
          var lazyInitName = lazies[lazyInitializers[i]];
          this[lazyInitName] = isolateProperties[lazyInitName];
        }
      }
      Isolate.prototype = oldIsolate.prototype;
      Isolate.prototype.constructor = Isolate;
      Isolate.$isolateProperties = isolateProperties;
      Isolate.functionThatReturnsNull = oldIsolate.functionThatReturnsNull;
      return Isolate;
    };
  }
  !function() {
    var intern = function(s) {
      var o = {};
      o[s] = 1;
      return Object.keys(convertToFastObject(o))[0];
    };
    init.getIsolateTag = function(name) {
      return intern("___dart_" + name + init.isolateTag);
    };
    var tableProperty = "___dart_isolate_tags_";
    var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
    var rootProperty = "_ZxYxX";
    for (var i = 0;; i++) {
      var property = intern(rootProperty + "_" + i + "_");
      if (!(property in usedProperties)) {
        usedProperties[property] = 1;
        init.isolateTag = property;
        break;
      }
    }
    init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
  }();
  // BEGIN invoke [main].
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != 'undefined') {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(M.main, []);
    else
      M.main([]);
  });
  // END invoke [main].
})();

//# sourceMappingURL=FluidMotion.checked.js.map
